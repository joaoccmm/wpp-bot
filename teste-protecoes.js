#!/usr/bin/env node

// Script de teste para verificar se as prote√ß√µes est√£o funcionando
const { protecao } = require('./utils/protecaoAntiBot');
const { CONFIG_SEGURANCA, verificarSobrecarga, aplicarDelayContextual } = require('./config/seguranca');

console.log('üß™ Testando Sistema de Prote√ß√£o Anti-Banimento\n');

async function testarProtecoes() {
  const usuarioTeste = 'teste_' + Date.now();
  
  console.log('1Ô∏è‚É£ Testando delays aleat√≥rios...');
  
  // Testar diferentes tipos de delay
  const tipos = ['inicio_conversa', 'pergunta_sensivel', 'envio_arquivo', 'resposta_rapida'];
  
  for (const tipo of tipos) {
    const inicio = Date.now();
    await protecao.delayAleatorio(tipo, usuarioTeste);
    const duracao = Date.now() - inicio;
    console.log(`   ‚úÖ ${tipo}: ${duracao}ms`);
  }
  
  console.log('\n2Ô∏è‚É£ Testando varia√ß√£o de mensagens...');
  
  const mensagemTeste = 'Ol√°! Tudo bem? Obrigado por aguardar.';
  const mensagemVariada = protecao.adicionarVariacaoNatural(mensagemTeste);
  console.log(`   Original: "${mensagemTeste}"`);
  console.log(`   Variada:  "${mensagemVariada}"`);
  
  console.log('\n3Ô∏è‚É£ Testando controle de velocidade...');
  
  // Simular m√∫ltiplas mensagens
  for (let i = 0; i < 5; i++) {
    protecao.registrarAtividade(usuarioTeste);
  }
  
  const precisaDelay = protecao.precisaDelayMaior(usuarioTeste);
  console.log(`   Usuario precisa delay maior: ${precisaDelay ? '‚úÖ' : '‚ùå'}`);
  
  console.log('\n4Ô∏è‚É£ Testando detec√ß√£o de hor√°rio...');
  
  const horarioSuspeito = protecao.isHorarioSuspeito();
  const agora = new Date();
  console.log(`   Hor√°rio atual: ${agora.toLocaleTimeString()}`);
  console.log(`   √â suspeito: ${horarioSuspeito ? '‚ö†Ô∏è Sim' : '‚úÖ N√£o'}`);
  
  console.log('\n5Ô∏è‚É£ Testando configura√ß√µes...');
  
  console.log(`   Max mensagens/hora: ${CONFIG_SEGURANCA.MAX_MENSAGENS_POR_HORA}`);
  console.log(`   Delay m√≠nimo: ${CONFIG_SEGURANCA.DELAY_MINIMO_ENTRE_MSGS}ms`);
  console.log(`   Ambiente: ${process.env.NODE_ENV || 'development'}`);
  
  console.log('\n6Ô∏è‚É£ Testando sobrecarga do sistema...');
  
  const sobrecarregado = verificarSobrecarga();
  console.log(`   Sistema sobrecarregado: ${sobrecarregado ? '‚ö†Ô∏è Sim' : '‚úÖ N√£o'}`);
  
  console.log('\n‚úÖ Todos os testes conclu√≠dos!');
  console.log('\nüìä Status Final:');
  console.log(`   üõ°Ô∏è Prote√ß√µes: ATIVAS`);
  console.log(`   ‚è±Ô∏è Delays: FUNCIONANDO`);
  console.log(`   üé≠ Varia√ß√µes: FUNCIONANDO`);
  console.log(`   üìà Monitoramento: ATIVO`);
  console.log(`   üö¶ Controle de velocidade: ATIVO`);
}

// Executar testes
testarProtecoes().catch(error => {
  console.error('‚ùå Erro nos testes:', error);
  process.exit(1);
});
